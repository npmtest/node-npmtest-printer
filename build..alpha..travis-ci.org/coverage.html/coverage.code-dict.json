{"/home/travis/build/npmtest/node-npmtest-printer/test.js":"/* istanbul instrument in package npmtest_printer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-printer/lib.npmtest_printer.js":"/* istanbul instrument in package npmtest_printer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_printer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_printer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-printer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-printer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_printer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_printer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_printer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_printer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_printer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_printer.__dirname + '/lib.npmtest_printer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-printer/node_modules/printer/lib/printer.js":"var printer_helper = {},\n    fs = require(\"fs\"),\n    child_process = require(\"child_process\"),\n    os = require(\"os\"),\n    path = require(\"path\"),\n    native_lib_path = path.join(__dirname, '../build/Release/node_printer.node'),\n    printer_helper;\n\nif(fs.existsSync(native_lib_path)) {\n    printer_helper = require(native_lib_path);\n} else {\n    printer_helper = require('./node_printer_'+process.platform+'_'+process.arch+'.node');\n}\n\n/** Return all installed printers including active jobs\n */\nmodule.exports.getPrinters = getPrinters;\n\n/** send data to printer\n */\nmodule.exports.printDirect = printDirect;\n\n/// send file to printer\nmodule.exports.printFile = printFile;\n\n/** Get supported print format for printDirect\n */\nmodule.exports.getSupportedPrintFormats = printer_helper.getSupportedPrintFormats;\n\n/**\n * Get possible job command for setJob. It depends on os.\n * @return Array of string. e.g.: DELETE, PAUSE, RESUME\n */\nmodule.exports.getSupportedJobCommands = printer_helper.getSupportedJobCommands;\n\n/** get printer info object. It includes all active jobs\n */\nmodule.exports.getPrinter = getPrinter;\nmodule.exports.getSelectedPaperSize = getSelectedPaperSize;\nmodule.exports.getPrinterDriverOptions = getPrinterDriverOptions;\n\n/// Return default printer name\nmodule.exports.getDefaultPrinterName = getDefaultPrinterName;\n\n/** get printer job info object\n */\nmodule.exports.getJob = getJob;\nmodule.exports.setJob = setJob;\n\n/**\n * return user defined printer, according to https://www.cups.org/documentation.php/doc-2.0/api-cups.html#cupsGetDefault2 :\n * \"Applications should use the cupsGetDests and cupsGetDest functions to get the user-defined default printer,\n * as this function does not support the lpoptions-defined default printer\"\n */\nfunction getDefaultPrinterName() {\n  var printerName = printer_helper.getDefaultPrinterName();\n  if(printerName) {\n    return printerName;\n  }\n\n  // seems correct posix behaviour\n  var printers= getPrinters();\n  for(i in printers) {\n    var printer = printers[i];\n    if(printer.isDefault === true) {\n      return printer.name;\n    }\n  }\n\n  // printer not found, return nothing(undefined)\n}\n\n/** Get printer info with jobs\n * @param printerName printer name to extract the info\n * @return printer object info:\n *\t\tTODO: to enum all possible attributes\n */\nfunction getPrinter(printerName)\n{\n    if(!printerName) {\n        printerName = getDefaultPrinterName();\n    }\n    var printer = printer_helper.getPrinter(printerName);\n    correctPrinterinfo(printer);\n    return printer;\n}\n\n/** Get printer driver options includes advanced options like supported paper size\n * @param printerName printer name to extract the info (default printer used if printer is not provided)\n * @return printer driver info:\n */\nfunction getPrinterDriverOptions(printerName)\n{\n    if(!printerName) {\n        printerName = getDefaultPrinterName();\n    }\n\n    return printer_helper.getPrinterDriverOptions(printerName);\n}\n\n/** Finds selected paper size pertaining to the specific printer out of all supported ones in driver_options\n * @param printerName printer name to extract the info (default printer used if printer is not provided)\n * @return selected paper size\n */\nfunction getSelectedPaperSize(printerName){\n    var driver_options = getPrinterDriverOptions(printerName);\n    var selectedSize = \"\";\n    if (driver_options && driver_options.PageSize) {\n        Object.keys(driver_options.PageSize).forEach(function(key){\n            if (driver_options.PageSize[key])\n                selectedSize = key;\n        });\n    }\n    return selectedSize;\n}\n\nfunction getJob(printerName, jobId)\n{\n    return printer_helper.getJob(printerName, jobId);\n}\n\nfunction setJob(printerName, jobId, command)\n{\n    return printer_helper.setJob(printerName, jobId, command);\n}\n\nfunction getPrinters(){\n    var printers = printer_helper.getPrinters();\n    for(i in printers){\n        correctPrinterinfo(printers[i]);\n    }\n    return printers;\n}\n\nfunction correctPrinterinfo(printer) {\n    if(printer.status || !printer.options || !printer.options['printer-state']){\n        return;\n    }\n\n    var status = printer.options['printer-state'];\n    // Add posix status\n    if(status == '3'){\n        status = 'IDLE'\n    }\n    else if(status == '4'){\n        status = 'PRINTING'\n    }\n    else if(status == '5'){\n        status = 'STOPPED'\n    }\n\n    // correct date type\n    var k;\n    for(k in printer.options) {\n        if(/time$/.test(k) && printer.options[k] && !(printer.options[k] instanceof Date)) {\n            printer.options[k] = new Date(printer.options[k] * 1000);\n        }\n    }\n\n    printer.status = status;\n}\n\n/*\n print raw data. This function is intend to be asynchronous\n\n parameters:\n parameters - Object, parameters objects with the following structure:\n data - String, mandatory, data to printer\n printer - String, optional, name of the printer, if missing, will try to print to default printer\n docname - String, optional, name of document showed in printer status\n type - String, optional, only for wind32, data type, one of the RAW, TEXT\n options - JS object with CUPS options, optional\n success - Function, optional, callback function\n error - Function, optional, callback function if exists any error\n\n or\n\n data - String, mandatory, data to printer\n printer - String, optional, name of the printer, if missing, will try to print to default printer\n docname - String, optional, name of document showed in printer status\n type - String, optional, data type, one of the RAW, TEXT\n options - JS object with CUPS options, optional\n success - Function, optional, callback function with first argument job_id\n error - Function, optional, callback function if exists any error\n */\nfunction printDirect(parameters){\n    var data = parameters\n        , printer\n        , docname\n        , type\n        , options\n        , success\n        , error;\n\n    if(arguments.length==1){\n        //TODO: check parameters type\n        //if (typeof parameters )\n        data = parameters.data;\n        printer = parameters.printer;\n        docname = parameters.docname;\n        type = parameters.type;\n        options = parameters.options||{};\n        success = parameters.success;\n        error = parameters.error;\n    }else{\n        printer = arguments[1];\n        type = arguments[2];\n        docname = arguments[3];\n        options = arguments[4];\n        success = arguments[5];\n        error = arguments[6];\n    }\n\n    if(!type){\n        type = \"RAW\";\n    }\n\n    // Set default printer name\n    if(!printer) {\n        printer = getDefaultPrinterName();\n    }\n\n    type = type.toUpperCase();\n\n    if(!docname){\n        docname = \"node print job\";\n    }\n\n    if (!options){\n        options = {};\n    }\n\n    //TODO: check parameters type\n    if(printer_helper.printDirect){// call C++ binding\n        try{\n            var res = printer_helper.printDirect(data, printer, docname, type, options);\n            if(res){\n                success(res);\n            }else{\n                error(Error(\"Something wrong in printDirect\"));\n            }\n        }catch (e){\n            error(e);\n        }\n    }else{\n        error(\"Not supported\");\n    }\n}\n\n/**\nparameters:\n   parameters - Object, parameters objects with the following structure:\n      filename - String, mandatory, data to printer\n      docname - String, optional, name of document showed in printer status\n      printer - String, optional, mane of the printer, if missed, will try to retrieve the default printer name\n      success - Function, optional, callback function\n      error - Function, optional, callback function if exists any error\n*/\nfunction printFile(parameters){\n    var filename,\n        docname,\n        printer,\n        options,\n        success,\n        error;\n\n    if((arguments.length !== 1) || (typeof(parameters) !== 'object')){\n        throw new Error('must provide arguments object');\n    }\n\n    filename = parameters.filename;\n    docname = parameters.docname;\n    printer = parameters.printer;\n    options = parameters.options || {};\n    success = parameters.success;\n    error = parameters.error;\n\n    if(!success){\n        success = function(){};\n    }\n\n    if(!error){\n        error = function(err){\n            throw err;\n        };\n    }\n\n    if(!filename){\n        var err = new Error('must provide at least a filename');\n        return error(err);\n    }\n\n    // try to define default printer name\n    if(!printer) {\n        printer = getDefaultPrinterName();\n    }\n\n    if(!printer) {\n        return error(new Error('Printer parameter of default printer is not defined'));\n    }\n\n    // set filename if docname is missing\n    if(!docname){\n        docname = filename;\n    }\n\n    //TODO: check parameters type\n    if(printer_helper.printFile){// call C++ binding\n        try{\n            // TODO: proper success/error callbacks from the extension\n            var res = printer_helper.printFile(filename, docname, printer, options);\n\n            if(!isNaN(parseInt(res))) {\n                success(res);\n            } else {\n                error(Error(res));\n            }\n        } catch (e) {\n            error(e);\n        }\n    } else {\n        error(\"Not supported\");\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-printer/node_modules/printer/Gruntfile.js":"module.exports = function(grunt) {\n    grunt.initConfig({\n        gyp: {\n            ia32: {\n                command: 'rebuild',\n                options: {\n                    arch: 'ia32'\n                }\n            },\n            x64: {\n                command: 'rebuild',\n                options: {\n                    arch: 'x64'\n                }\n            }\n        },\n        \"nw-gyp\": {\n            ia32: {\n                command: 'rebuild',\n                options: {\n                    arch: 'ia32'\n                }\n            },\n            x64: {\n                command: 'rebuild',\n                options: {\n                    arch: 'x64'\n                }\n            }\n        },\n        copy: {\n            ia32: {\n                files: [{src: 'build/Release/node_printer.node', dest: 'lib/node_printer_' + process.platform + '_ia32.node'}]\n            },\n            x64: {\n                files: [{src: 'build/Release/node_printer.node', dest: 'lib/node_printer_' + process.platform + '_x64.node'}]\n            }\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-node-gyp');\n    grunt.loadNpmTasks('grunt-nw-gyp');\n    grunt.loadNpmTasks('grunt-contrib-copy');\n\n    grunt.registerTask('build-nw-ia32', [\n            'nw-gyp:ia32',\n            'copy:ia32'\n    ]);\n\n    grunt.registerTask('build-ia32', [\n            'gyp:ia32',\n            'copy:ia32'\n    ]);\n\n    grunt.registerTask('build-x64', [\n            'gyp:x64',\n            'copy:x64'\n    ]);\n\n    grunt.registerTask('build-nw-x64', [\n            'nw-gyp:x64',\n            'copy:x64'\n    ]);\n\n    grunt.registerTask('build', [\n            'build-ia32',\n            'build-x64'\n    ]);\n\n    grunt.registerTask('build-nw', [\n            'build-nw-ia32',\n            'build-nw-x64'\n    ]);\n}\n","/home/travis/build/npmtest/node-npmtest-printer/node_modules/printer/printer.js":"module.exports = require('./lib/printer');"}